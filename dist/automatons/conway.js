"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Conway = void 0;
const baseAutomaton_1 = require("./baseAutomaton");
class Conway extends baseAutomaton_1.BaseAutomaton {
    constructor(dimensions, options, customOptions) {
        super(dimensions, options, {});
        this.shouldWrapKey = "shouldWrap";
        this.getCurrentState = () => {
            return {
                data: this.buffer,
                map: this.getColorMap(),
                traceNumber: -1
            };
        };
        this.getNextState = () => {
            //#region without wrap around
            const getNearbyPopulationNoWrap = (x, y) => {
                const maxY = this._buffer.length - 1;
                const maxX = this._buffer[0].length - 1;
                const isUnderMinY = y - 1 < 0;
                const isUnderMinX = x - 1 < 0;
                const isOverMaxY = y + 1 > maxY;
                const isOverMaxX = x + 1 > maxX;
                let numOfLiveCells = 0;
                //top left
                if (!isUnderMinY && !isUnderMinX && this._buffer[y - 1][x - 1] === 1)
                    numOfLiveCells++;
                //top
                if (!isUnderMinY && this._buffer[y - 1][x])
                    numOfLiveCells++;
                //top right
                if (!isUnderMinY && !isOverMaxX && this._buffer[y - 1][x + 1] === 1)
                    numOfLiveCells++;
                //right
                if (!isOverMaxX && this._buffer[y][x + 1])
                    numOfLiveCells++;
                //bottom right
                if (!isOverMaxY && !isOverMaxX && this._buffer[y + 1][x + 1] === 1)
                    numOfLiveCells++;
                //bottom
                if (!isOverMaxY && this._buffer[y + 1][x])
                    numOfLiveCells++;
                //bottom left
                if (!isOverMaxY && !isUnderMinX && this._buffer[y + 1][x - 1] === 1)
                    numOfLiveCells++;
                //left
                if (!isOverMaxX && this._buffer[y][x - 1] === 1)
                    numOfLiveCells++;
                return numOfLiveCells;
            };
            //#endregion end wrap around
            //#region wrap around
            const wrap = (number, max) => ((number % max) + max) % max;
            const getNearbyPopulationWrap = (x, y) => {
                const maxY = this._buffer.length;
                const maxX = this._buffer[0].length;
                let numOfLiveCells = 0;
                //top left
                if (this._buffer[wrap(y - 1, maxY)][wrap(x - 1, maxX)] === 1)
                    numOfLiveCells++;
                //top
                if (this._buffer[wrap(y - 1, maxY)][x] === 1)
                    numOfLiveCells++;
                //top right
                if (this._buffer[wrap(y - 1, maxY)][wrap(x + 1, maxX)] === 1)
                    numOfLiveCells++;
                //right
                if (this._buffer[y][wrap(x + 1, maxX)] === 1)
                    numOfLiveCells++;
                //bottom right
                if (this._buffer[wrap(y + 1, maxY)][wrap(x + 1, maxX)] === 1)
                    numOfLiveCells++;
                //bottom
                if (this._buffer[wrap(y + 1, maxY)][x] === 1)
                    numOfLiveCells++;
                //bottom left
                if (this._buffer[wrap(y + 1, maxY)][wrap(x - 1, maxX)] === 1)
                    numOfLiveCells++;
                //left
                if (this._buffer[y][wrap(x - 1, maxX)] === 1)
                    numOfLiveCells++;
                return numOfLiveCells;
            };
            //#endregion wrap around
            const dimensions = this.dimensions;
            const nextBuffer = this.genEmptyArray(dimensions);
            const shouldWrap = this.getCustomOption(this.shouldWrapKey);
            for (let y = 0; y < dimensions.y; y++) {
                for (let x = 0; x < dimensions.x; x++) {
                    const ogPop = this._buffer[y][x];
                    const numOfLiveCellsNearby = shouldWrap ? getNearbyPopulationWrap(x, y) : getNearbyPopulationNoWrap(x, y);
                    let newPop;
                    if (ogPop === 0 || ogPop === -1) //if the cell is dead
                        newPop = (numOfLiveCellsNearby === 3) ? 1 : 0;
                    else if (ogPop === 1) //if the cell is live
                        newPop = (numOfLiveCellsNearby === 2 || numOfLiveCellsNearby === 3) ? 1 : 0;
                    if (this._options.shouldTrace && newPop === 0 && (ogPop === -1 || ogPop === 1))
                        newPop = -1;
                    nextBuffer[y][x] = newPop;
                }
            }
            this._buffer = nextBuffer;
            return {
                data: nextBuffer,
                map: this.getColorMap(),
                traceNumber: -1
            };
        };
        this.getColorMap = () => {
            return {
                "-1": "#696969",
                1: "#FFFFFF" //white
            };
        };
        this._customOptions[this.shouldWrapKey] = new baseAutomaton_1.CustomAutomatonOption(this.shouldWrapKey, customOptions.shouldWrap);
    }
    get name() {
        return "Conway";
    }
    toString() {
        const indexOfY = (buffer, index, condition, indexCalc) => {
            if (index < 0 || index >= buffer.length)
                return -1;
            if (condition(buffer[index]))
                return index;
            return indexOfY(buffer, indexCalc(index), condition, indexCalc);
        };
        const indexOfX = (buffer, condition, indexCalc) => {
            let smallest = buffer[0].indexOf(this.pop);
            for (let i = 1; i < buffer.length; i++) {
                const index = indexCalc(buffer[i]);
                if (condition(smallest, index))
                    smallest = index;
            }
            return smallest;
        };
        const firstY = indexOfY(this._buffer, 0, (array) => array.findIndex((value) => value != this.noPop) != -1, (index) => index + 1);
        const lastY = indexOfY(this._buffer, this._buffer.length - 1, (array) => array.findIndex((value) => value != this.noPop) != -1, (index) => index - 1);
        const firstX = indexOfX(this._buffer, (current, next) => next < current, (array) => array.indexOf(this.pop));
        const lastX = indexOfX(this._buffer, (current, next) => next > current, (array) => array.lastIndexOf(this.pop));
        let str = "";
        for (let y = firstY; y <= lastY; y++) {
            for (let x = firstX; x <= lastX; x++)
                str += this._buffer[y][x] === 1 ? "O" : ".";
            str += "\n";
        }
        return str.trim();
    }
}
exports.Conway = Conway;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29ud2F5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2F1dG9tYXRvbnMvY29ud2F5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLG1EQUF1RTtBQU12RSxNQUFhLE1BQU8sU0FBUSw2QkFBYTtJQUlyQyxZQUFZLFVBQXNCLEVBQUUsT0FBeUIsRUFBRSxhQUE0QjtRQUV2RixLQUFLLENBQUMsVUFBVSxFQUFFLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQztRQUozQixrQkFBYSxHQUFHLFlBQVksQ0FBQztRQVVyQyxvQkFBZSxHQUFHLEdBQVUsRUFBRTtZQUUxQixPQUFPO2dCQUNILElBQUksRUFBRSxJQUFJLENBQUMsTUFBTTtnQkFDakIsR0FBRyxFQUFFLElBQUksQ0FBQyxXQUFXLEVBQUU7Z0JBQ3ZCLFdBQVcsRUFBRSxDQUFDLENBQUM7YUFDbEIsQ0FBQztRQUVOLENBQUMsQ0FBQztRQUVGLGlCQUFZLEdBQUcsR0FBVSxFQUFFO1lBRXZCLDZCQUE2QjtZQUM3QixNQUFNLHlCQUF5QixHQUFHLENBQUMsQ0FBUyxFQUFFLENBQVMsRUFBVSxFQUFFO2dCQUUvRCxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7Z0JBQ3JDLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztnQkFDeEMsTUFBTSxXQUFXLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQzlCLE1BQU0sV0FBVyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUM5QixNQUFNLFVBQVUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQztnQkFDaEMsTUFBTSxVQUFVLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUM7Z0JBQ2hDLElBQUksY0FBYyxHQUFHLENBQUMsQ0FBQztnQkFFdkIsVUFBVTtnQkFDVixJQUFJLENBQUMsV0FBVyxJQUFJLENBQUMsV0FBVyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDO29CQUNoRSxjQUFjLEVBQUUsQ0FBQztnQkFFckIsS0FBSztnQkFDTCxJQUFJLENBQUMsV0FBVyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDdEMsY0FBYyxFQUFFLENBQUM7Z0JBRXJCLFdBQVc7Z0JBQ1gsSUFBSSxDQUFDLFdBQVcsSUFBSSxDQUFDLFVBQVUsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQztvQkFDL0QsY0FBYyxFQUFFLENBQUM7Z0JBRXJCLE9BQU87Z0JBQ1AsSUFBSSxDQUFDLFVBQVUsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7b0JBQ3JDLGNBQWMsRUFBRSxDQUFDO2dCQUVyQixjQUFjO2dCQUNkLElBQUksQ0FBQyxVQUFVLElBQUksQ0FBQyxVQUFVLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUM7b0JBQzlELGNBQWMsRUFBRSxDQUFDO2dCQUVyQixRQUFRO2dCQUNSLElBQUksQ0FBQyxVQUFVLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUNyQyxjQUFjLEVBQUUsQ0FBQztnQkFFckIsYUFBYTtnQkFDYixJQUFJLENBQUMsVUFBVSxJQUFJLENBQUMsV0FBVyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDO29CQUMvRCxjQUFjLEVBQUUsQ0FBQztnQkFFckIsTUFBTTtnQkFDTixJQUFJLENBQUMsVUFBVSxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUM7b0JBQzNDLGNBQWMsRUFBRSxDQUFDO2dCQUVyQixPQUFPLGNBQWMsQ0FBQztZQUUxQixDQUFDLENBQUM7WUFDRiw0QkFBNEI7WUFFNUIscUJBQXFCO1lBQ3JCLE1BQU0sSUFBSSxHQUFHLENBQUMsTUFBYyxFQUFFLEdBQVcsRUFBVSxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUM7WUFFbkYsTUFBTSx1QkFBdUIsR0FBRyxDQUFDLENBQVMsRUFBRSxDQUFTLEVBQVUsRUFBRTtnQkFFN0QsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUM7Z0JBQ2pDLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDO2dCQUNwQyxJQUFJLGNBQWMsR0FBRyxDQUFDLENBQUM7Z0JBRXZCLFVBQVU7Z0JBQ1YsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDO29CQUN4RCxjQUFjLEVBQUUsQ0FBQztnQkFFckIsS0FBSztnQkFDTCxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO29CQUN4QyxjQUFjLEVBQUUsQ0FBQztnQkFFckIsV0FBVztnQkFDWCxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUM7b0JBQ3hELGNBQWMsRUFBRSxDQUFDO2dCQUVyQixPQUFPO2dCQUNQLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUM7b0JBQ3hDLGNBQWMsRUFBRSxDQUFDO2dCQUVyQixjQUFjO2dCQUNkLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQztvQkFDeEQsY0FBYyxFQUFFLENBQUM7Z0JBRXJCLFFBQVE7Z0JBQ1IsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztvQkFDeEMsY0FBYyxFQUFFLENBQUM7Z0JBRXJCLGFBQWE7Z0JBQ2IsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDO29CQUN4RCxjQUFjLEVBQUUsQ0FBQztnQkFFckIsTUFBTTtnQkFDTixJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDO29CQUN4QyxjQUFjLEVBQUUsQ0FBQztnQkFFckIsT0FBTyxjQUFjLENBQUM7WUFFMUIsQ0FBQyxDQUFDO1lBQ0Ysd0JBQXdCO1lBRXhCLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUM7WUFDbkMsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUNsRCxNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFVLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUVyRSxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsVUFBVSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtnQkFFbkMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7b0JBRW5DLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQ2pDLE1BQU0sb0JBQW9CLEdBQUcsVUFBVSxDQUFDLENBQUMsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLHlCQUF5QixDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztvQkFDMUcsSUFBSSxNQUFjLENBQUM7b0JBRW5CLElBQUksS0FBSyxLQUFLLENBQUMsSUFBSSxLQUFLLEtBQUssQ0FBQyxDQUFDLEVBQUUscUJBQXFCO3dCQUNsRCxNQUFNLEdBQUcsQ0FBQyxvQkFBb0IsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7eUJBQzdDLElBQUksS0FBSyxLQUFLLENBQUMsRUFBRSxxQkFBcUI7d0JBQ3ZDLE1BQU0sR0FBRyxDQUFDLG9CQUFvQixLQUFLLENBQUMsSUFBSSxvQkFBb0IsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBRWhGLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLElBQUksTUFBTSxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssS0FBSyxDQUFDLENBQUMsSUFBSSxLQUFLLEtBQUssQ0FBQyxDQUFDO3dCQUMxRSxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7b0JBRWhCLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUM7aUJBRTdCO2FBRUo7WUFFRCxJQUFJLENBQUMsT0FBTyxHQUFHLFVBQVUsQ0FBQztZQUUxQixPQUFPO2dCQUNILElBQUksRUFBRSxVQUFVO2dCQUNoQixHQUFHLEVBQUUsSUFBSSxDQUFDLFdBQVcsRUFBRTtnQkFDdkIsV0FBVyxFQUFFLENBQUMsQ0FBQzthQUNsQixDQUFDO1FBRU4sQ0FBQyxDQUFDO1FBTUYsZ0JBQVcsR0FBRyxHQUFhLEVBQUU7WUFFekIsT0FBTztnQkFDSCxJQUFJLEVBQUUsU0FBUztnQkFDZixDQUFDLEVBQUUsU0FBUyxDQUFDLE9BQU87YUFDdkIsQ0FBQztRQUVOLENBQUMsQ0FBQTtRQTdKRyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxJQUFJLHFDQUFxQixDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsYUFBYSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBRXRILENBQUM7SUFnSkQsSUFBVyxJQUFJO1FBQ1gsT0FBTyxRQUFRLENBQUM7SUFDcEIsQ0FBQztJQVdELFFBQVE7UUFFSixNQUFNLFFBQVEsR0FBRyxDQUFDLE1BQWtCLEVBQUUsS0FBYSxFQUFFLFNBQXVDLEVBQUUsU0FBb0MsRUFBVSxFQUFFO1lBRTFJLElBQUksS0FBSyxHQUFHLENBQUMsSUFBSSxLQUFLLElBQUksTUFBTSxDQUFDLE1BQU07Z0JBQ25DLE9BQU8sQ0FBQyxDQUFDLENBQUM7WUFFZCxJQUFJLFNBQVMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQ3hCLE9BQU8sS0FBSyxDQUFDO1lBRWpCLE9BQU8sUUFBUSxDQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsS0FBSyxDQUFDLEVBQUUsU0FBUyxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBRXBFLENBQUMsQ0FBQztRQUVGLE1BQU0sUUFBUSxHQUFHLENBQUMsTUFBa0IsRUFBRSxTQUFxRCxFQUFFLFNBQXNDLEVBQVUsRUFBRTtZQUUzSSxJQUFJLFFBQVEsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUUzQyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtnQkFFcEMsTUFBTSxLQUFLLEdBQUcsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUVuQyxJQUFJLFNBQVMsQ0FBQyxRQUFRLEVBQUUsS0FBSyxDQUFDO29CQUMxQixRQUFRLEdBQUcsS0FBSyxDQUFDO2FBRXhCO1lBRUQsT0FBTyxRQUFRLENBQUM7UUFFcEIsQ0FBQyxDQUFDO1FBRUYsTUFBTSxNQUFNLEdBQUcsUUFBUSxDQUNuQixJQUFJLENBQUMsT0FBTyxFQUNaLENBQUMsRUFDRCxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsRUFDaEUsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQ3ZCLENBQUM7UUFFRixNQUFNLEtBQUssR0FBRyxRQUFRLENBQ2xCLElBQUksQ0FBQyxPQUFPLEVBQ1osSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUN2QixDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsRUFDaEUsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQ3ZCLENBQUM7UUFFRixNQUFNLE1BQU0sR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUksR0FBRyxPQUFPLEVBQUUsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDN0csTUFBTSxLQUFLLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxPQUFPLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLEdBQUcsT0FBTyxFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBRWhILElBQUksR0FBRyxHQUFHLEVBQUUsQ0FBQztRQUViLEtBQUssSUFBSSxDQUFDLEdBQUcsTUFBTSxFQUFFLENBQUMsSUFBSSxLQUFLLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFFbEMsS0FBSyxJQUFJLENBQUMsR0FBRyxNQUFNLEVBQUUsQ0FBQyxJQUFJLEtBQUssRUFBRSxDQUFDLEVBQUU7Z0JBQ2hDLEdBQUcsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUM7WUFFaEQsR0FBRyxJQUFJLElBQUksQ0FBQztTQUVmO1FBRUQsT0FBTyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUM7SUFFdEIsQ0FBQztDQUVKO0FBdE9ELHdCQXNPQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEN1c3RvbUF1dG9tYXRvbk9wdGlvbiwgQmFzZUF1dG9tYXRvbiB9IGZyb20gXCIuL2Jhc2VBdXRvbWF0b25cIjtcclxuXHJcbmV4cG9ydCB0eXBlIENvbndheU9wdGlvbnMgPSB7XHJcbiAgICBzaG91bGRXcmFwOiBib29sZWFuO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQ29ud2F5IGV4dGVuZHMgQmFzZUF1dG9tYXRvbiB7XHJcblxyXG4gICAgcHJpdmF0ZSBzaG91bGRXcmFwS2V5ID0gXCJzaG91bGRXcmFwXCI7XHJcblxyXG4gICAgY29uc3RydWN0b3IoZGltZW5zaW9uczogVHdvRFZlY3Rvciwgb3B0aW9uczogQXV0b21hdG9uT3B0aW9ucywgY3VzdG9tT3B0aW9uczogQ29ud2F5T3B0aW9ucykge1xyXG5cclxuICAgICAgICBzdXBlcihkaW1lbnNpb25zLCBvcHRpb25zLCB7fSk7XHJcblxyXG4gICAgICAgIHRoaXMuX2N1c3RvbU9wdGlvbnNbdGhpcy5zaG91bGRXcmFwS2V5XSA9IG5ldyBDdXN0b21BdXRvbWF0b25PcHRpb24odGhpcy5zaG91bGRXcmFwS2V5LCBjdXN0b21PcHRpb25zLnNob3VsZFdyYXApO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBnZXRDdXJyZW50U3RhdGUgPSAoKTogU3RhdGUgPT4ge1xyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBkYXRhOiB0aGlzLmJ1ZmZlcixcclxuICAgICAgICAgICAgbWFwOiB0aGlzLmdldENvbG9yTWFwKCksXHJcbiAgICAgICAgICAgIHRyYWNlTnVtYmVyOiAtMVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgfTtcclxuXHJcbiAgICBnZXROZXh0U3RhdGUgPSAoKTogU3RhdGUgPT4ge1xyXG5cclxuICAgICAgICAvLyNyZWdpb24gd2l0aG91dCB3cmFwIGFyb3VuZFxyXG4gICAgICAgIGNvbnN0IGdldE5lYXJieVBvcHVsYXRpb25Ob1dyYXAgPSAoeDogbnVtYmVyLCB5OiBudW1iZXIpOiBudW1iZXIgPT4ge1xyXG5cclxuICAgICAgICAgICAgY29uc3QgbWF4WSA9IHRoaXMuX2J1ZmZlci5sZW5ndGggLSAxO1xyXG4gICAgICAgICAgICBjb25zdCBtYXhYID0gdGhpcy5fYnVmZmVyWzBdLmxlbmd0aCAtIDE7XHJcbiAgICAgICAgICAgIGNvbnN0IGlzVW5kZXJNaW5ZID0geSAtIDEgPCAwO1xyXG4gICAgICAgICAgICBjb25zdCBpc1VuZGVyTWluWCA9IHggLSAxIDwgMDtcclxuICAgICAgICAgICAgY29uc3QgaXNPdmVyTWF4WSA9IHkgKyAxID4gbWF4WTtcclxuICAgICAgICAgICAgY29uc3QgaXNPdmVyTWF4WCA9IHggKyAxID4gbWF4WDtcclxuICAgICAgICAgICAgbGV0IG51bU9mTGl2ZUNlbGxzID0gMDtcclxuXHJcbiAgICAgICAgICAgIC8vdG9wIGxlZnRcclxuICAgICAgICAgICAgaWYgKCFpc1VuZGVyTWluWSAmJiAhaXNVbmRlck1pblggJiYgdGhpcy5fYnVmZmVyW3kgLSAxXVt4IC0gMV0gPT09IDEpXHJcbiAgICAgICAgICAgICAgICBudW1PZkxpdmVDZWxscysrO1xyXG5cclxuICAgICAgICAgICAgLy90b3BcclxuICAgICAgICAgICAgaWYgKCFpc1VuZGVyTWluWSAmJiB0aGlzLl9idWZmZXJbeSAtIDFdW3hdKVxyXG4gICAgICAgICAgICAgICAgbnVtT2ZMaXZlQ2VsbHMrKztcclxuXHJcbiAgICAgICAgICAgIC8vdG9wIHJpZ2h0XHJcbiAgICAgICAgICAgIGlmICghaXNVbmRlck1pblkgJiYgIWlzT3Zlck1heFggJiYgdGhpcy5fYnVmZmVyW3kgLSAxXVt4ICsgMV0gPT09IDEpXHJcbiAgICAgICAgICAgICAgICBudW1PZkxpdmVDZWxscysrO1xyXG5cclxuICAgICAgICAgICAgLy9yaWdodFxyXG4gICAgICAgICAgICBpZiAoIWlzT3Zlck1heFggJiYgdGhpcy5fYnVmZmVyW3ldW3ggKyAxXSlcclxuICAgICAgICAgICAgICAgIG51bU9mTGl2ZUNlbGxzKys7XHJcblxyXG4gICAgICAgICAgICAvL2JvdHRvbSByaWdodFxyXG4gICAgICAgICAgICBpZiAoIWlzT3Zlck1heFkgJiYgIWlzT3Zlck1heFggJiYgdGhpcy5fYnVmZmVyW3kgKyAxXVt4ICsgMV0gPT09IDEpXHJcbiAgICAgICAgICAgICAgICBudW1PZkxpdmVDZWxscysrO1xyXG5cclxuICAgICAgICAgICAgLy9ib3R0b21cclxuICAgICAgICAgICAgaWYgKCFpc092ZXJNYXhZICYmIHRoaXMuX2J1ZmZlclt5ICsgMV1beF0pXHJcbiAgICAgICAgICAgICAgICBudW1PZkxpdmVDZWxscysrO1xyXG5cclxuICAgICAgICAgICAgLy9ib3R0b20gbGVmdFxyXG4gICAgICAgICAgICBpZiAoIWlzT3Zlck1heFkgJiYgIWlzVW5kZXJNaW5YICYmIHRoaXMuX2J1ZmZlclt5ICsgMV1beCAtIDFdID09PSAxKVxyXG4gICAgICAgICAgICAgICAgbnVtT2ZMaXZlQ2VsbHMrKztcclxuXHJcbiAgICAgICAgICAgIC8vbGVmdFxyXG4gICAgICAgICAgICBpZiAoIWlzT3Zlck1heFggJiYgdGhpcy5fYnVmZmVyW3ldW3ggLSAxXSA9PT0gMSlcclxuICAgICAgICAgICAgICAgIG51bU9mTGl2ZUNlbGxzKys7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gbnVtT2ZMaXZlQ2VsbHM7XHJcblxyXG4gICAgICAgIH07XHJcbiAgICAgICAgLy8jZW5kcmVnaW9uIGVuZCB3cmFwIGFyb3VuZFxyXG5cclxuICAgICAgICAvLyNyZWdpb24gd3JhcCBhcm91bmRcclxuICAgICAgICBjb25zdCB3cmFwID0gKG51bWJlcjogbnVtYmVyLCBtYXg6IG51bWJlcik6IG51bWJlciA9PiAoKG51bWJlciAlIG1heCkgKyBtYXgpICUgbWF4O1xyXG5cclxuICAgICAgICBjb25zdCBnZXROZWFyYnlQb3B1bGF0aW9uV3JhcCA9ICh4OiBudW1iZXIsIHk6IG51bWJlcik6IG51bWJlciA9PiB7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBtYXhZID0gdGhpcy5fYnVmZmVyLmxlbmd0aDtcclxuICAgICAgICAgICAgY29uc3QgbWF4WCA9IHRoaXMuX2J1ZmZlclswXS5sZW5ndGg7XHJcbiAgICAgICAgICAgIGxldCBudW1PZkxpdmVDZWxscyA9IDA7XHJcblxyXG4gICAgICAgICAgICAvL3RvcCBsZWZ0XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9idWZmZXJbd3JhcCh5IC0gMSwgbWF4WSldW3dyYXAoeCAtIDEsIG1heFgpXSA9PT0gMSlcclxuICAgICAgICAgICAgICAgIG51bU9mTGl2ZUNlbGxzKys7XHJcblxyXG4gICAgICAgICAgICAvL3RvcFxyXG4gICAgICAgICAgICBpZiAodGhpcy5fYnVmZmVyW3dyYXAoeSAtIDEsIG1heFkpXVt4XSA9PT0gMSlcclxuICAgICAgICAgICAgICAgIG51bU9mTGl2ZUNlbGxzKys7XHJcblxyXG4gICAgICAgICAgICAvL3RvcCByaWdodFxyXG4gICAgICAgICAgICBpZiAodGhpcy5fYnVmZmVyW3dyYXAoeSAtIDEsIG1heFkpXVt3cmFwKHggKyAxLCBtYXhYKV0gPT09IDEpXHJcbiAgICAgICAgICAgICAgICBudW1PZkxpdmVDZWxscysrO1xyXG5cclxuICAgICAgICAgICAgLy9yaWdodFxyXG4gICAgICAgICAgICBpZiAodGhpcy5fYnVmZmVyW3ldW3dyYXAoeCArIDEsIG1heFgpXSA9PT0gMSlcclxuICAgICAgICAgICAgICAgIG51bU9mTGl2ZUNlbGxzKys7XHJcblxyXG4gICAgICAgICAgICAvL2JvdHRvbSByaWdodFxyXG4gICAgICAgICAgICBpZiAodGhpcy5fYnVmZmVyW3dyYXAoeSArIDEsIG1heFkpXVt3cmFwKHggKyAxLCBtYXhYKV0gPT09IDEpXHJcbiAgICAgICAgICAgICAgICBudW1PZkxpdmVDZWxscysrO1xyXG5cclxuICAgICAgICAgICAgLy9ib3R0b21cclxuICAgICAgICAgICAgaWYgKHRoaXMuX2J1ZmZlclt3cmFwKHkgKyAxLCBtYXhZKV1beF0gPT09IDEpXHJcbiAgICAgICAgICAgICAgICBudW1PZkxpdmVDZWxscysrO1xyXG5cclxuICAgICAgICAgICAgLy9ib3R0b20gbGVmdFxyXG4gICAgICAgICAgICBpZiAodGhpcy5fYnVmZmVyW3dyYXAoeSArIDEsIG1heFkpXVt3cmFwKHggLSAxLCBtYXhYKV0gPT09IDEpXHJcbiAgICAgICAgICAgICAgICBudW1PZkxpdmVDZWxscysrO1xyXG5cclxuICAgICAgICAgICAgLy9sZWZ0XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9idWZmZXJbeV1bd3JhcCh4IC0gMSwgbWF4WCldID09PSAxKVxyXG4gICAgICAgICAgICAgICAgbnVtT2ZMaXZlQ2VsbHMrKztcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBudW1PZkxpdmVDZWxscztcclxuXHJcbiAgICAgICAgfTtcclxuICAgICAgICAvLyNlbmRyZWdpb24gd3JhcCBhcm91bmRcclxuXHJcbiAgICAgICAgY29uc3QgZGltZW5zaW9ucyA9IHRoaXMuZGltZW5zaW9ucztcclxuICAgICAgICBjb25zdCBuZXh0QnVmZmVyID0gdGhpcy5nZW5FbXB0eUFycmF5KGRpbWVuc2lvbnMpO1xyXG4gICAgICAgIGNvbnN0IHNob3VsZFdyYXAgPSB0aGlzLmdldEN1c3RvbU9wdGlvbjxib29sZWFuPih0aGlzLnNob3VsZFdyYXBLZXkpO1xyXG5cclxuICAgICAgICBmb3IgKGxldCB5ID0gMDsgeSA8IGRpbWVuc2lvbnMueTsgeSsrKSB7XHJcblxyXG4gICAgICAgICAgICBmb3IgKGxldCB4ID0gMDsgeCA8IGRpbWVuc2lvbnMueDsgeCsrKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3Qgb2dQb3AgPSB0aGlzLl9idWZmZXJbeV1beF07XHJcbiAgICAgICAgICAgICAgICBjb25zdCBudW1PZkxpdmVDZWxsc05lYXJieSA9IHNob3VsZFdyYXAgPyBnZXROZWFyYnlQb3B1bGF0aW9uV3JhcCh4LCB5KSA6IGdldE5lYXJieVBvcHVsYXRpb25Ob1dyYXAoeCwgeSk7XHJcbiAgICAgICAgICAgICAgICBsZXQgbmV3UG9wOiBudW1iZXI7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKG9nUG9wID09PSAwIHx8IG9nUG9wID09PSAtMSkgLy9pZiB0aGUgY2VsbCBpcyBkZWFkXHJcbiAgICAgICAgICAgICAgICAgICAgbmV3UG9wID0gKG51bU9mTGl2ZUNlbGxzTmVhcmJ5ID09PSAzKSA/IDEgOiAwO1xyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAob2dQb3AgPT09IDEpIC8vaWYgdGhlIGNlbGwgaXMgbGl2ZVxyXG4gICAgICAgICAgICAgICAgICAgIG5ld1BvcCA9IChudW1PZkxpdmVDZWxsc05lYXJieSA9PT0gMiB8fCBudW1PZkxpdmVDZWxsc05lYXJieSA9PT0gMykgPyAxIDogMDtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5zaG91bGRUcmFjZSAmJiBuZXdQb3AgPT09IDAgJiYgKG9nUG9wID09PSAtMSB8fCBvZ1BvcCA9PT0gMSkpXHJcbiAgICAgICAgICAgICAgICAgICAgbmV3UG9wID0gLTE7XHJcblxyXG4gICAgICAgICAgICAgICAgbmV4dEJ1ZmZlclt5XVt4XSA9IG5ld1BvcDtcclxuXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9idWZmZXIgPSBuZXh0QnVmZmVyO1xyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBkYXRhOiBuZXh0QnVmZmVyLFxyXG4gICAgICAgICAgICBtYXA6IHRoaXMuZ2V0Q29sb3JNYXAoKSxcclxuICAgICAgICAgICAgdHJhY2VOdW1iZXI6IC0xXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICB9O1xyXG5cclxuICAgIHB1YmxpYyBnZXQgbmFtZSgpOiBDZWxsdWxhckF1dG9tYXRhIHtcclxuICAgICAgICByZXR1cm4gXCJDb253YXlcIjtcclxuICAgIH1cclxuXHJcbiAgICBnZXRDb2xvck1hcCA9ICgpOiBDb2xvck1hcCA9PiB7XHJcblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIFwiLTFcIjogXCIjNjk2OTY5XCIsIC8vZGltZ3JleVxyXG4gICAgICAgICAgICAxOiBcIiNGRkZGRkZcIiAvL3doaXRlXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgdG9TdHJpbmcoKTogc3RyaW5nIHtcclxuXHJcbiAgICAgICAgY29uc3QgaW5kZXhPZlkgPSAoYnVmZmVyOiBudW1iZXJbXVtdLCBpbmRleDogbnVtYmVyLCBjb25kaXRpb246IChhcnJheTogbnVtYmVyW10pID0+IGJvb2xlYW4sIGluZGV4Q2FsYzogKGluZGV4OiBudW1iZXIpID0+IG51bWJlcik6IG51bWJlciA9PiB7XHJcblxyXG4gICAgICAgICAgICBpZiAoaW5kZXggPCAwIHx8IGluZGV4ID49IGJ1ZmZlci5sZW5ndGgpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gLTE7XHJcblxyXG4gICAgICAgICAgICBpZiAoY29uZGl0aW9uKGJ1ZmZlcltpbmRleF0pKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGluZGV4O1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGluZGV4T2ZZKGJ1ZmZlciwgaW5kZXhDYWxjKGluZGV4KSwgY29uZGl0aW9uLCBpbmRleENhbGMpO1xyXG5cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBjb25zdCBpbmRleE9mWCA9IChidWZmZXI6IG51bWJlcltdW10sIGNvbmRpdGlvbjogKGN1cnJlbnQ6IG51bWJlciwgbmV4dDogbnVtYmVyKSA9PiBib29sZWFuLCBpbmRleENhbGM6IChhcnJheTogbnVtYmVyW10pID0+IG51bWJlcik6IG51bWJlciA9PiB7XHJcblxyXG4gICAgICAgICAgICBsZXQgc21hbGxlc3QgPSBidWZmZXJbMF0uaW5kZXhPZih0aGlzLnBvcCk7XHJcblxyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IGJ1ZmZlci5sZW5ndGg7IGkrKykge1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gaW5kZXhDYWxjKGJ1ZmZlcltpXSk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGNvbmRpdGlvbihzbWFsbGVzdCwgaW5kZXgpKVxyXG4gICAgICAgICAgICAgICAgICAgIHNtYWxsZXN0ID0gaW5kZXg7XHJcblxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gc21hbGxlc3Q7XHJcblxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGNvbnN0IGZpcnN0WSA9IGluZGV4T2ZZKFxyXG4gICAgICAgICAgICB0aGlzLl9idWZmZXIsXHJcbiAgICAgICAgICAgIDAsXHJcbiAgICAgICAgICAgIChhcnJheSkgPT4gYXJyYXkuZmluZEluZGV4KCh2YWx1ZSkgPT4gdmFsdWUgIT0gdGhpcy5ub1BvcCkgIT0gLTEsXHJcbiAgICAgICAgICAgIChpbmRleCkgPT4gaW5kZXggKyAxXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgY29uc3QgbGFzdFkgPSBpbmRleE9mWShcclxuICAgICAgICAgICAgdGhpcy5fYnVmZmVyLFxyXG4gICAgICAgICAgICB0aGlzLl9idWZmZXIubGVuZ3RoIC0gMSxcclxuICAgICAgICAgICAgKGFycmF5KSA9PiBhcnJheS5maW5kSW5kZXgoKHZhbHVlKSA9PiB2YWx1ZSAhPSB0aGlzLm5vUG9wKSAhPSAtMSxcclxuICAgICAgICAgICAgKGluZGV4KSA9PiBpbmRleCAtIDFcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICBjb25zdCBmaXJzdFggPSBpbmRleE9mWCh0aGlzLl9idWZmZXIsIChjdXJyZW50LCBuZXh0KSA9PiBuZXh0IDwgY3VycmVudCwgKGFycmF5KSA9PiBhcnJheS5pbmRleE9mKHRoaXMucG9wKSk7XHJcbiAgICAgICAgY29uc3QgbGFzdFggPSBpbmRleE9mWCh0aGlzLl9idWZmZXIsIChjdXJyZW50LCBuZXh0KSA9PiBuZXh0ID4gY3VycmVudCwgKGFycmF5KSA9PiBhcnJheS5sYXN0SW5kZXhPZih0aGlzLnBvcCkpO1xyXG5cclxuICAgICAgICBsZXQgc3RyID0gXCJcIjtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgeSA9IGZpcnN0WTsgeSA8PSBsYXN0WTsgeSsrKSB7XHJcblxyXG4gICAgICAgICAgICBmb3IgKGxldCB4ID0gZmlyc3RYOyB4IDw9IGxhc3RYOyB4KyspXHJcbiAgICAgICAgICAgICAgICBzdHIgKz0gdGhpcy5fYnVmZmVyW3ldW3hdID09PSAxID8gXCJPXCIgOiBcIi5cIjtcclxuXHJcbiAgICAgICAgICAgIHN0ciArPSBcIlxcblwiO1xyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBzdHIudHJpbSgpO1xyXG5cclxuICAgIH1cclxuXHJcbn0iXX0=