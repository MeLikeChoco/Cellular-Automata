"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseAutomaton = void 0;
class BaseAutomaton {
    constructor(dimensions, options, customOptions) {
        this.genEmptyArray = (dimensions) => {
            this._generation = 0;
            return Array.from(Array(dimensions.y), () => {
                const length = new Array(dimensions.x);
                length.fill(0);
                return length;
            });
        };
        this.setCustomOption = (name, value) => {
            if (Object.keys(this._customOptions).includes(name))
                this._customOptions[name] = value;
        };
        this.getCustomOption = (name) => {
            if (Object.keys(this._customOptions).includes(name))
                return this._customOptions[name];
        };
        this.setPixel = (coord, value) => {
            this._buffer[coord.y][coord.x] = value !== null && value !== void 0 ? value : 1;
        };
        this.clearPixel = (coord) => {
            this._buffer[coord.y][coord.x] = 0;
        };
        this.getCurrentState = () => {
            throw new Error("Method is not implemented!");
        };
        this.getNextState = () => {
            throw new Error("Method is not implemented!");
        };
        this.getColorMap = () => {
            throw new Error("Method is not implemented!");
        };
        this.resize = (dimensions) => {
            this._buffer = this.genEmptyArray(dimensions);
        };
        this.clear = () => {
            this._buffer.forEach(length => {
                length.fill(0);
            });
        };
        this.isEmpty = () => this._buffer.every(length => length.every((pop) => pop === this.noPop));
        this._options = options;
        this._customOptions = customOptions;
        this._generation = 0;
        this.resize(dimensions);
    }
    get noPop() {
        return 0;
    }
    get pop() {
        return 1;
    }
    get buffer() {
        return this._buffer;
    }
    get dimensions() {
        return {
            x: this._buffer[0].length,
            y: this._buffer.length
        };
    }
    get generation() {
        return this._generation;
    }
    get options() {
        return this._options;
    }
    get customOptions() {
        return this._customOptions;
    }
}
exports.BaseAutomaton = BaseAutomaton;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZUF1dG9tYXRvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hdXRvbWF0YS9iYXNlQXV0b21hdG9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLE1BQXNCLGFBQWE7SUFPL0IsWUFBc0IsVUFBc0IsRUFBRSxPQUF5QixFQUFFLGFBQXFDO1FBeUNwRyxrQkFBYSxHQUFHLENBQUMsVUFBc0IsRUFBYyxFQUFFO1lBRTdELElBQUksQ0FBQyxXQUFXLEdBQUcsQ0FBQyxDQUFDO1lBRXJCLE9BQU8sS0FBSyxDQUFDLElBQUksQ0FDYixLQUFLLENBQWdCLFVBQVUsQ0FBQyxDQUFDLENBQUMsRUFDbEMsR0FBRyxFQUFFO2dCQUVELE1BQU0sTUFBTSxHQUFHLElBQUksS0FBSyxDQUFTLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFFL0MsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFFZixPQUFPLE1BQU0sQ0FBQztZQUVsQixDQUFDLENBQ0osQ0FBQztRQUVOLENBQUMsQ0FBQztRQUtGLG9CQUFlLEdBQUcsQ0FBQyxJQUFZLEVBQUUsS0FBYyxFQUFRLEVBQUU7WUFFckQsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDO2dCQUMvQyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQztRQUUxQyxDQUFDLENBQUM7UUFFRixvQkFBZSxHQUFHLENBQUksSUFBWSxFQUFLLEVBQUU7WUFFckMsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDO2dCQUMvQyxPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFNLENBQUM7UUFFOUMsQ0FBQyxDQUFBO1FBRUQsYUFBUSxHQUFHLENBQUMsS0FBaUIsRUFBRSxLQUFjLEVBQVEsRUFBRTtZQUNuRCxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxhQUFMLEtBQUssY0FBTCxLQUFLLEdBQUksQ0FBQyxDQUFDO1FBQ2hELENBQUMsQ0FBQztRQUVGLGVBQVUsR0FBRyxDQUFDLEtBQWlCLEVBQVEsRUFBRTtZQUNyQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3ZDLENBQUMsQ0FBQTtRQUVRLG9CQUFlLEdBQUcsR0FBVSxFQUFFO1lBQ25DLE1BQU0sSUFBSSxLQUFLLENBQUMsNEJBQTRCLENBQUMsQ0FBQztRQUNsRCxDQUFDLENBQUM7UUFFTyxpQkFBWSxHQUFHLEdBQVUsRUFBRTtZQUNoQyxNQUFNLElBQUksS0FBSyxDQUFDLDRCQUE0QixDQUFDLENBQUM7UUFDbEQsQ0FBQyxDQUFDO1FBRU8sZ0JBQVcsR0FBRyxHQUFhLEVBQUU7WUFDbEMsTUFBTSxJQUFJLEtBQUssQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDO1FBQ2xELENBQUMsQ0FBQTtRQUVELFdBQU0sR0FBRyxDQUFDLFVBQXNCLEVBQVEsRUFBRTtZQUN0QyxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDbEQsQ0FBQyxDQUFDO1FBRUYsVUFBSyxHQUFHLEdBQVMsRUFBRTtZQUVmLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFO2dCQUMxQixNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ25CLENBQUMsQ0FBQyxDQUFDO1FBRVAsQ0FBQyxDQUFBO1FBRUQsWUFBTyxHQUFHLEdBQVksRUFBRSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsR0FBRyxLQUFLLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBM0c3RixJQUFJLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQztRQUN4QixJQUFJLENBQUMsY0FBYyxHQUFHLGFBQWEsQ0FBQztRQUNwQyxJQUFJLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQztRQUVyQixJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBRTVCLENBQUM7SUFFRCxJQUFjLEtBQUs7UUFDZixPQUFPLENBQUMsQ0FBQztJQUNiLENBQUM7SUFFRCxJQUFjLEdBQUc7UUFDYixPQUFPLENBQUMsQ0FBQztJQUNiLENBQUM7SUFFRCxJQUFXLE1BQU07UUFDYixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDeEIsQ0FBQztJQUVELElBQVcsVUFBVTtRQUNqQixPQUFPO1lBQ0gsQ0FBQyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTTtZQUN6QixDQUFDLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNO1NBQ3pCLENBQUM7SUFDTixDQUFDO0lBRUQsSUFBVyxVQUFVO1FBQ2pCLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQztJQUM1QixDQUFDO0lBRUQsSUFBVyxPQUFPO1FBQ2QsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQ3pCLENBQUM7SUFFRCxJQUFXLGFBQWE7UUFDcEIsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDO0lBQy9CLENBQUM7Q0EwRUo7QUF4SEQsc0NBd0hDIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGFic3RyYWN0IGNsYXNzIEJhc2VBdXRvbWF0b24gaW1wbGVtZW50cyBBdXRvbWF0b24ge1xyXG5cclxuICAgIHByb3RlY3RlZCBfb3B0aW9uczogQXV0b21hdG9uT3B0aW9ucztcclxuICAgIHByb3RlY3RlZCBfY3VzdG9tT3B0aW9uczogQ3VzdG9tQXV0b21hdG9uT3B0aW9ucztcclxuICAgIHByb3RlY3RlZCBfYnVmZmVyOiBudW1iZXJbXVtdO1xyXG4gICAgcHJvdGVjdGVkIF9nZW5lcmF0aW9uOiBudW1iZXI7XHJcblxyXG4gICAgcHJvdGVjdGVkIGNvbnN0cnVjdG9yKGRpbWVuc2lvbnM6IFR3b0RWZWN0b3IsIG9wdGlvbnM6IEF1dG9tYXRvbk9wdGlvbnMsIGN1c3RvbU9wdGlvbnM6IEN1c3RvbUF1dG9tYXRvbk9wdGlvbnMpIHtcclxuXHJcbiAgICAgICAgdGhpcy5fb3B0aW9ucyA9IG9wdGlvbnM7XHJcbiAgICAgICAgdGhpcy5fY3VzdG9tT3B0aW9ucyA9IGN1c3RvbU9wdGlvbnM7XHJcbiAgICAgICAgdGhpcy5fZ2VuZXJhdGlvbiA9IDA7XHJcblxyXG4gICAgICAgIHRoaXMucmVzaXplKGRpbWVuc2lvbnMpO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgZ2V0IG5vUG9wKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIDA7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIGdldCBwb3AoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gMTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0IGJ1ZmZlcigpOiBudW1iZXJbXVtdIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fYnVmZmVyO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXQgZGltZW5zaW9ucygpOiBUd29EVmVjdG9yIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICB4OiB0aGlzLl9idWZmZXJbMF0ubGVuZ3RoLFxyXG4gICAgICAgICAgICB5OiB0aGlzLl9idWZmZXIubGVuZ3RoXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0IGdlbmVyYXRpb24oKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZ2VuZXJhdGlvbjtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0IG9wdGlvbnMoKTogQXV0b21hdG9uT3B0aW9ucyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX29wdGlvbnM7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldCBjdXN0b21PcHRpb25zKCk6IEN1c3RvbUF1dG9tYXRvbk9wdGlvbnMge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9jdXN0b21PcHRpb25zO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBnZW5FbXB0eUFycmF5ID0gKGRpbWVuc2lvbnM6IFR3b0RWZWN0b3IpOiBudW1iZXJbXVtdID0+IHtcclxuXHJcbiAgICAgICAgdGhpcy5fZ2VuZXJhdGlvbiA9IDA7XHJcblxyXG4gICAgICAgIHJldHVybiBBcnJheS5mcm9tKFxyXG4gICAgICAgICAgICBBcnJheTxBcnJheTxudW1iZXI+PihkaW1lbnNpb25zLnkpLFxyXG4gICAgICAgICAgICAoKSA9PiB7XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3QgbGVuZ3RoID0gbmV3IEFycmF5PG51bWJlcj4oZGltZW5zaW9ucy54KTtcclxuXHJcbiAgICAgICAgICAgICAgICBsZW5ndGguZmlsbCgwKTtcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbGVuZ3RoO1xyXG5cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICk7XHJcblxyXG4gICAgfTtcclxuXHJcbiAgICBhYnN0cmFjdCBpZDogQ2VsbHVsYXJBdXRvbWF0YTtcclxuICAgIGFic3RyYWN0IG5hbWU6IENlbGx1bGFyQXV0b21hdGFEaXNwbGF5TmFtZTtcclxuXHJcbiAgICBzZXRDdXN0b21PcHRpb24gPSAobmFtZTogc3RyaW5nLCB2YWx1ZTogdW5rbm93bik6IHZvaWQgPT4ge1xyXG5cclxuICAgICAgICBpZiAoT2JqZWN0LmtleXModGhpcy5fY3VzdG9tT3B0aW9ucykuaW5jbHVkZXMobmFtZSkpXHJcbiAgICAgICAgICAgIHRoaXMuX2N1c3RvbU9wdGlvbnNbbmFtZV0gPSB2YWx1ZTtcclxuXHJcbiAgICB9O1xyXG5cclxuICAgIGdldEN1c3RvbU9wdGlvbiA9IDxUPihuYW1lOiBzdHJpbmcpOiBUID0+IHtcclxuXHJcbiAgICAgICAgaWYgKE9iamVjdC5rZXlzKHRoaXMuX2N1c3RvbU9wdGlvbnMpLmluY2x1ZGVzKG5hbWUpKVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fY3VzdG9tT3B0aW9uc1tuYW1lXSBhcyBUO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBzZXRQaXhlbCA9IChjb29yZDogVHdvRFZlY3RvciwgdmFsdWU/OiBudW1iZXIpOiB2b2lkID0+IHtcclxuICAgICAgICB0aGlzLl9idWZmZXJbY29vcmQueV1bY29vcmQueF0gPSB2YWx1ZSA/PyAxO1xyXG4gICAgfTtcclxuXHJcbiAgICBjbGVhclBpeGVsID0gKGNvb3JkOiBUd29EVmVjdG9yKTogdm9pZCA9PiB7XHJcbiAgICAgICAgdGhpcy5fYnVmZmVyW2Nvb3JkLnldW2Nvb3JkLnhdID0gMDtcclxuICAgIH1cclxuXHJcbiAgICBhYnN0cmFjdCBnZXRDdXJyZW50U3RhdGUgPSAoKTogU3RhdGUgPT4ge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWQhXCIpO1xyXG4gICAgfTtcclxuXHJcbiAgICBhYnN0cmFjdCBnZXROZXh0U3RhdGUgPSAoKTogU3RhdGUgPT4ge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWQhXCIpO1xyXG4gICAgfTtcclxuXHJcbiAgICBhYnN0cmFjdCBnZXRDb2xvck1hcCA9ICgpOiBDb2xvck1hcCA9PiB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWV0aG9kIGlzIG5vdCBpbXBsZW1lbnRlZCFcIik7XHJcbiAgICB9XHJcblxyXG4gICAgcmVzaXplID0gKGRpbWVuc2lvbnM6IFR3b0RWZWN0b3IpOiB2b2lkID0+IHtcclxuICAgICAgICB0aGlzLl9idWZmZXIgPSB0aGlzLmdlbkVtcHR5QXJyYXkoZGltZW5zaW9ucyk7XHJcbiAgICB9O1xyXG5cclxuICAgIGNsZWFyID0gKCk6IHZvaWQgPT4ge1xyXG5cclxuICAgICAgICB0aGlzLl9idWZmZXIuZm9yRWFjaChsZW5ndGggPT4ge1xyXG4gICAgICAgICAgICBsZW5ndGguZmlsbCgwKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgaXNFbXB0eSA9ICgpOiBib29sZWFuID0+IHRoaXMuX2J1ZmZlci5ldmVyeShsZW5ndGggPT4gbGVuZ3RoLmV2ZXJ5KChwb3ApID0+IHBvcCA9PT0gdGhpcy5ub1BvcCkpO1xyXG5cclxuICAgIGFic3RyYWN0IHRvU3RyaW5nKCk6IHN0cmluZztcclxuXHJcbn0iXX0=